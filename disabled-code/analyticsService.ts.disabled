import { SupabaseClient } from '@supabase/supabase-js'

export class AnalyticsService {
  constructor(private supabase: SupabaseClient) {}

  // Record assessment analytics
  async recordAssessmentAnalytics(userId: string, assessmentData: {
    assessmentDate: string
    overallScore: number
    improvementFromLast?: number
    industryPercentile?: number
    timeSpentMinutes?: number
    categoriesCompleted: number
    totalCategories: number
  }) {
    const { data, error } = await this.supabase
      .from('assessment_analytics')
      .insert({
        user_id: userId,
        assessment_date: assessmentData.assessmentDate,
        overall_score: assessmentData.overallScore,
        improvement_from_last: assessmentData.improvementFromLast || 0,
        industry_percentile: assessmentData.industryPercentile,
        time_spent_minutes: assessmentData.timeSpentMinutes,
        categories_completed: assessmentData.categoriesCompleted,
        total_categories: assessmentData.totalCategories
      })
      .select()
      .single()

    if (error) throw error
    return data
  }

  // Get industry benchmarks
  async getIndustryBenchmarks(industry: string, businessSize?: string) {
    let query = this.supabase
      .from('industry_benchmarks')
      .select('*')
      .eq('industry_name', industry)

    if (businessSize) {
      query = query.eq('business_size', businessSize)
    }

    const { data, error } = await query.single()

    if (error) {
      // Return default benchmarks if industry not found
      return this.getDefaultBenchmarks()
    }

    return data
  }

  // Update score history
  async updateScoreHistory(userId: string, assessmentId: string, scoreData: {
    overallScore: number
    categoryScores: Record<string, number>
    assessmentDate: string
    scoreChange?: number
  }) {
    const { data, error } = await this.supabase
      .from('score_history')
      .insert({
        user_id: userId,
        assessment_id: assessmentId,
        overall_score: scoreData.overallScore,
        category_scores: scoreData.categoryScores,
        assessment_date: scoreData.assessmentDate,
        score_change: scoreData.scoreChange || 0
      })
      .select()
      .single()

    if (error) throw error
    return data
  }

  // Get user performance trends
  async getUserPerformanceTrends(userId: string, months = 12) {
    const { data, error } = await this.supabase
      .from('score_history')
      .select('*')
      .eq('user_id', userId)
      .gte('assessment_date', new Date(Date.now() - months * 30 * 24 * 60 * 60 * 1000).toISOString())
      .order('assessment_date', { ascending: true })

    if (error) throw error
    return data
  }

  private getDefaultBenchmarks() {
    return {
      industry_name: 'General Business',
      avg_total_score: 65,
      avg_business_registration: 75,
      avg_credit_profile: 55,
      avg_financial_documentation: 60,
      avg_operational_infrastructure: 70,
      avg_online_presence: 65,
      avg_risk_compliance: 70,
      percentile_25: 45,
      percentile_50: 65,
      percentile_75: 85,
      percentile_90: 95
    }
  }
}
